"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Updater = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const error_1 = require("./error");
const fetcher_1 = require("./fetcher");
const store_1 = require("./store");
const config_1 = require("./utils/config");
const types_1 = require("./utils/types");
class Updater {
    constructor(options) {
        const { metadataDir, metadataBaseUrl, targetDir, targetBaseUrl, fetcher, config, } = options;
        this.dir = metadataDir;
        this.metadataBaseUrl = metadataBaseUrl;
        this.targetDir = targetDir;
        this.targetBaseUrl = targetBaseUrl;
        const data = this.loadLocalMetadata(types_1.MetadataKind.Root);
        this.trustedSet = new store_1.TrustedMetadataStore(data);
        this.config = { ...config_1.defaultConfig, ...config };
        this.fetcher = fetcher || new fetcher_1.Fetcher(this.config.fetchTimeout);
    }
    async refresh() {
        await this.loadRoot();
        await this.loadTimestamp();
        await this.loadSnapshot();
        await this.loadTargets(types_1.MetadataKind.Targets, types_1.MetadataKind.Root);
    }
    loadLocalMetadata(fileName) {
        const filePath = path.join(this.dir, `${fileName}.json`);
        return fs.readFileSync(filePath);
    }
    async loadRoot() {
        // Load remote root metadata.
        // Sequentially load and persist on local disk every newer root metadata
        // version available on the remote.
        console.log('Loading root metadata');
        const rootVersion = this.trustedSet.root.signed.version;
        const lowerBound = rootVersion + 1;
        const upperBound = lowerBound + this.config.maxRootRotations;
        for (let version = lowerBound; version <= upperBound; version++) {
            const url = path.join(this.metadataBaseUrl, `${version}.root.json`);
            try {
                const bytesData = await this.fetcher.downloadBytes(url, this.config.rootMaxLength);
                this.trustedSet.updateRoot(bytesData);
                this.persistMetadata(types_1.MetadataKind.Root, bytesData);
            }
            catch (error) {
                console.log('error', error);
                break;
            }
        }
        console.log('--------------------------------');
    }
    async loadTimestamp() {
        console.log('Loading timestamp metadata');
        // Load local and remote timestamp metadata
        try {
            const data = this.loadLocalMetadata(types_1.MetadataKind.Timestamp);
            this.trustedSet.updateTimestamp(data);
        }
        catch (error) {
            console.error('Cannot load local timestamp metadata');
        }
        //Load from remote (whether local load succeeded or not)
        const url = path.join(this.metadataBaseUrl, `timestamp.json`);
        const bytesData = await this.fetcher.downloadBytes(url, this.config.timestampMaxLength);
        try {
            this.trustedSet.updateTimestamp(bytesData);
        }
        catch (error) {
            // If new timestamp version is same as current, discardd the new one.
            // This is normal and should NOT raise an error.
            if (error instanceof error_1.EqualVersionError) {
                return;
            }
            // Re-raise any other error
            throw error;
        }
        this.persistMetadata(types_1.MetadataKind.Timestamp, bytesData);
        console.log('--------------------------------');
    }
    async loadSnapshot() {
        console.log('Loading snapshot metadata');
        //Load local (and if needed remote) snapshot metadata
        try {
            const data = this.loadLocalMetadata(types_1.MetadataKind.Snapshot);
            this.trustedSet.updateSnapshot(data, true);
            console.log('Local snapshot is valid: not downloading new one');
        }
        catch (error) {
            console.log('Local snapshot is invalid: downloading new one');
            if (!this.trustedSet.timestamp) {
                throw new ReferenceError('No timestamp metadata');
            }
            const snapshotMeta = this.trustedSet.timestamp.signed.snapshotMeta;
            const maxLength = snapshotMeta.length || this.config.snapshotMaxLength;
            const version = this.trustedSet.root.signed.consistentSnapshot
                ? snapshotMeta.version
                : undefined;
            const url = path.join(this.metadataBaseUrl, version ? `${version}.snapshot.json` : `snapshot.json`);
            try {
                const bytesData = await this.fetcher.downloadBytes(url, maxLength);
                this.trustedSet.updateSnapshot(bytesData);
                this.persistMetadata(types_1.MetadataKind.Snapshot, bytesData);
            }
            catch (error) {
                console.log('error', error);
            }
        }
        console.log('--------------------------------');
    }
    async loadTargets(role, parentRole) {
        console.log(`Loading ${role} metadata`);
        if (this.trustedSet.getRole(role)) {
            return this.trustedSet.getRole(role);
        }
        try {
            const buffer = this.loadLocalMetadata(role);
            this.trustedSet.updateDelegatedTargets(buffer, role, parentRole);
            console.log('Local %s is valid: not downloading new one', role);
        }
        catch (error) {
            // Local 'role' does not exist or is invalid: update from remote
            console.log('Local %s is invalid: downloading new one', role);
            if (!this.trustedSet.snapshot) {
                throw new ReferenceError('No snapshot metadata');
            }
            const metaInfo = this.trustedSet.snapshot.signed.meta[`${role}.json`];
            // TODO: use length for fetching
            const maxLength = metaInfo.length || this.config.targetsMaxLength;
            const version = this.trustedSet.root.signed.consistentSnapshot
                ? metaInfo.version
                : undefined;
            const url = path.join(this.metadataBaseUrl, version ? `${version}.${role}.json` : `${role}.json`);
            try {
                const bytesData = await this.fetcher.downloadBytes(url, maxLength);
                this.trustedSet.updateDelegatedTargets(bytesData, role, parentRole);
                this.persistMetadata(role, bytesData);
            }
            catch (error) {
                console.log('error', error);
            }
        }
        console.log('--------------------------------');
        return this.trustedSet.getRole(role);
    }
    // Returns the TargetFile instance with information for the given target path.
    //
    // Implicitly calls refresh if it hasn't already been called.
    async getTargetInfo(targetPath) {
        if (!this.trustedSet.targets) {
            this.refresh();
        }
        return this.preorderDepthFirstWalk(targetPath);
    }
    async preorderDepthFirstWalk(targetPath) {
        // Interrogates the tree of target delegations in order of appearance
        // (which implicitly order trustworthiness), and returns the matching
        // target found in the most trusted role.
        var _a, _b;
        // List of delegations to be interrogated. A (role, parent role) pair
        // is needed to load and verify the delegated targets metadata.
        const delegationsToVisit = [
            {
                roleName: types_1.MetadataKind.Targets,
                parentRoleName: types_1.MetadataKind.Root,
            },
        ];
        const visitedRoleNames = new Set();
        // Preorder depth-first traversal of the graph of target delegations.
        while (visitedRoleNames.size <= this.config.maxDelegations &&
            delegationsToVisit.length > 0) {
            //  Pop the role name from the top of the stack.
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const { roleName, parentRoleName } = delegationsToVisit.pop();
            // Skip any visited current role to prevent cycles.
            if (visitedRoleNames.has(roleName)) {
                console.log('Skipping visited current role %s', roleName);
                continue;
            }
            // The metadata for 'role_name' must be downloaded/updated before
            // its targets, delegations, and child roles can be inspected.
            const targets = (_a = (await this.loadTargets(roleName, parentRoleName))) === null || _a === void 0 ? void 0 : _a.signed;
            if (!targets) {
                continue;
            }
            const target = (_b = targets.targets) === null || _b === void 0 ? void 0 : _b[targetPath];
            if (target) {
                console.log('Found target %s in role %s', targetPath, roleName);
                return target;
            }
            // After preorder check, add current role to set of visited roles.
            visitedRoleNames.add(roleName);
            if (targets.delegations) {
                const childRolesToVisit = [];
                // NOTE: This may be a slow operation if there are many delegated roles.
                const rolesForTarget = targets.delegations.rolesForTarget(targetPath);
                for (const { role: childName, terminating } of rolesForTarget) {
                    console.log('Adding child role %s', childName);
                    childRolesToVisit.push({
                        roleName: childName,
                        parentRoleName: roleName,
                    });
                    if (terminating) {
                        console.log('Terminating delegation at %s', childName);
                        delegationsToVisit.splice(0); // empty the array
                        break;
                    }
                }
                childRolesToVisit.reverse();
                delegationsToVisit.push(...childRolesToVisit);
            }
        }
        if (delegationsToVisit.length > 0) {
            console.log('%d delegations left to visit but allowed at most %d delegations', delegationsToVisit.length, this.config.maxDelegations);
        }
    }
    async findCachedTarget(targetInfo, filePath) {
        if (!filePath) {
            filePath = this.generateTargetPath(targetInfo);
        }
        try {
            const targetFile = fs.readFileSync(filePath);
            targetInfo.verify(targetFile);
            return filePath;
        }
        catch (error) {
            return;
        }
    }
    generateTargetPath(targetInfo) {
        if (!this.targetDir) {
            throw new error_1.ValueError('Target directory not set');
        }
        return path.join(this.targetDir, targetInfo.path);
    }
    async downloadTarget(targetInfo, filePath, targetBaseUrl) {
        if (!filePath) {
            filePath = this.generateTargetPath(targetInfo);
        }
        if (!targetBaseUrl) {
            if (!this.targetBaseUrl) {
                throw new error_1.ValueError('Target base URL not set');
            }
            targetBaseUrl = this.targetBaseUrl;
        }
        let targetFilePath = targetInfo.path;
        const consistentSnapshot = this.trustedSet.root.signed.consistentSnapshot;
        if (consistentSnapshot && this.config.prefixTargetsWithHash) {
            const hashes = Object.values(targetInfo.hashes);
            const basename = path.basename(targetFilePath);
            targetFilePath = `${hashes[0]}.${basename}`;
        }
        const url = path.join(targetBaseUrl, targetFilePath);
        const targetFile = await this.fetcher.downloadBytes(url, targetInfo.length);
        targetInfo.verify(targetFile);
        fs.writeFileSync(filePath, targetFile);
        return filePath;
    }
    async persistMetadata(metaDataName, bytesData) {
        try {
            const filePath = path.join(this.dir, `${metaDataName}.json`);
            fs.writeFileSync(filePath, bytesData.toString('utf8'));
        }
        catch (error) {
            console.error('persistMetadata error', error);
        }
    }
}
exports.Updater = Updater;
