"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fetcher = exports.BaseFetcher = void 0;
const make_fetch_happen_1 = __importDefault(require("make-fetch-happen"));
const error_1 = require("./error");
class BaseFetcher {
    constructor(timeout) {
        this.timeout = timeout;
    }
    async downloadBytes(url, maxLength) {
        const reader = await this.fetch(url);
        let numberOfBytesReceived = 0;
        const chunks = [];
        for await (const chunk of reader) {
            const bufferChunk = Buffer.from(chunk);
            numberOfBytesReceived += bufferChunk.length;
            if (numberOfBytesReceived > maxLength) {
                throw new error_1.DownloadLengthMismatchError('Max length reached');
            }
            chunks.push(bufferChunk);
        }
        // concatenate chunks into a single buffer
        return Buffer.concat(chunks);
    }
}
exports.BaseFetcher = BaseFetcher;
class Fetcher extends BaseFetcher {
    constructor(timeout) {
        super(timeout);
    }
    async fetch(url) {
        const response = await (0, make_fetch_happen_1.default)(url, { timeout: this.timeout });
        if (!response.ok || !(response === null || response === void 0 ? void 0 : response.body)) {
            throw new error_1.DownloadHTTPError('Failed to download', response.status);
        }
        return response.body;
    }
}
exports.Fetcher = Fetcher;
