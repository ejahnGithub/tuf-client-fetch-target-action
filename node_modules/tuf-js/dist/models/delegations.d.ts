import { JSONObject, JSONValue } from '../utils/types';
import { Key } from './key';
import { DelegatedRole } from './role';
type DelegatedRoleMap = Record<string, DelegatedRole>;
type KeyMap = Record<string, Key>;
interface DelegationsOptions {
    keys: KeyMap;
    roles?: DelegatedRoleMap;
    unrecognizedFields?: Record<string, JSONValue>;
}
export declare class Delegations {
    readonly keys: KeyMap;
    readonly roles?: DelegatedRoleMap;
    readonly unrecognizedFields?: Record<string, JSONValue>;
    constructor(options: DelegationsOptions);
    equals(other: Delegations): boolean;
    rolesForTarget(targetPath: string): Generator<{
        role: string;
        terminating: boolean;
    }>;
    toJSON(): JSONObject;
    static fromJSON(data: JSONObject): Delegations;
}
export {};
